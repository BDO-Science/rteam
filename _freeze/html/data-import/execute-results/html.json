{
  "hash": "0a1afa2ff53dbb8295d59babc8374cb1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data import with the tidyverse :: Cheatsheet\"\ndescription: \" \"\nexecute:\n  eval: true\n  output: false\n  warning: true\n---\n\n::: {.cell .column-margin}\n<img src=\"images/logo-readr.png\" height=\"138\" alt=\"Hex logo for readr - a white document icon going dowards into a dark blue funnel, with a white icon of a data table coming out the narrow end, all on a blue background.\" />\n<br><br><a href=\"../data-import.pdf\">\n<p><i class=\"bi bi-file-pdf\"></i> Download PDF</p>\n<img src=\"../pngs/data-import.png\" width=\"200\" alt=\"\"/>\n</a>\n<br><br><p>Translations (PDF)</p>\n* <a href=\"../translations/bengali/data-import_bn.pdf\"><i class=\"bi bi-file-pdf\"></i>Bengali</a>\n* <a href=\"../translations/persian/data-import_fa.pdf\"><i class=\"bi bi-file-pdf\"></i>Persian</a>\n* <a href=\"../translations/portuguese/data-import_pt_br.pdf\"><i class=\"bi bi-file-pdf\"></i>Portuguese</a>\n* <a href=\"../translations/russian/data-import_ru.pdf\"><i class=\"bi bi-file-pdf\"></i>Russian</a>\n* <a href=\"../translations/spanish/data-import_es.pdf\"><i class=\"bi bi-file-pdf\"></i>Spanish</a>\n* <a href=\"../translations/turkish/data-import_tr.pdf\"><i class=\"bi bi-file-pdf\"></i>Turkish</a>\n* <a href=\"../translations/ukrainian/data-import_uk.pdf\"><i class=\"bi bi-file-pdf\"></i>Ukrainian</a>\n* <a href=\"../translations/uzbek/data-import_uz.pdf\"><i class=\"bi bi-file-pdf\"></i>Uzbek</a>\n:::\n\n\n\nOne of the first steps of a project is to import outside data into R.\nData is often stored in tabular formats, like csv files or spreadsheets.\n\n-   The first half of this cheatsheet shows how to import and save text files into R using **readr**.\n-   The second half shows how to import spreadsheet data from Excel files using **readxl** or Google Sheets using **googlesheets4**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nlibrary(readxl)\nlibrary(googlesheets4)\n```\n:::\n\n\n\nFor importing other types of data try one of the following packages:\n\n-   **haven**: SPSS, Stata, and SAS files\n-   **DBI**: databases\n-   **jsonlite**: json\n-   **xml2**: XML\n-   **httr**: Web APIs\n-   **rvest**: HTML (Web Scraping)\n-   **readr::read_lines()**: text data\n\n## Read Tabular Data with readr\n\n\n\n\n\n\n\nSee `?read_delim`.\n\n``` r\nread_*(\n  file, \n  col_names = TRUE, col_types = NULL, col_select = NULL, \n  show_col_types = TRUE\n  id = NULL, locale, \n  n_max = Inf, skip = 0, guess_max = min(1000, n_max), \n  na = c(\"\", \"NA\")\n)\n```\n\n### Examples\n\n-   Read files with any delimiter: `read_delim()`.\n    If no delimiter is specified, it will automatically guess.\n\n    -   If the file you want to import is the following:\n\n        ```         \n        A|B|C\n        1|2|3\n        4|5|NA\n        ```\n\n\n\n        ::: {.cell}\n        \n        :::\n\n\n\n    -   Read it with `read_delim()` and it will look like the following when imported:\n\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        read_delim(\"file.txt\", delim = \"|\", show_col_types = FALSE)\n        ```\n        :::\n\n\n\n    -   To make `file.txt`, run:\n\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        write_file(\"A|B|C\\n1|2|3\\n4|5|NA\", file = \"file.txt\")\n        ```\n        :::\n\n\n\n-   Read a comma delimited file with period decimal marks: `read_csv()`.\n\n    -   If the file you want to import is the following:\n\n        ```         \n        A,B,C\n        1,2,3\n        4,5,NA\n        ```\n\n\n\n        ::: {.cell}\n        \n        :::\n\n\n\n    -   Read it with `read_csv()` and it will look like the following when imported:\n\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        read_csv(\"file.csv\", show_col_types = FALSE)\n        ```\n        :::\n\n\n\n    -   To make `file.csv`, run:\n\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        write_file(\"A,B,C\\n1,2,3\\n4,5,NA\", file = \"file.csv\")\n        ```\n        :::\n\n\n\n-   Read semicolon delimited files with comma decimal marks: `read_csv2()`.\n\n    -   If the file you want to import is the following:\n\n        ```         \n        A;B;C\n        1,5;2;3\n        4,5;5;NA\n        ```\n\n\n\n        ::: {.cell}\n        \n        :::\n\n\n\n    -   Read it with `read_csv2()` and it will look like the following when imported:\n\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        read_csv2(\"file2.csv\", show_col_types = FALSE)\n        ```\n        :::\n\n\n\n    -   To make `file2.csv`, run:\n\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        write_file(\"A;B;C\\n1,5;2;3\\n4,5;5;NA\", file = \"file2.csv\")\n        ```\n        :::\n\n\n\n-   Read a tab delimited file: `read_tsv()` or `read_table()`.\n\n    Read a fixed width file: `read_fwf(\"file.tsv\", fwf_widths(c(2, 2, NA)))`.\n\n    -   If the file you want to import is the following:\n\n        ```         \n        A B C\n        1 2 3\n        4 5 NA\n        ```\n\n\n\n        ::: {.cell}\n        \n        :::\n\n\n\n    -   Read it with `read_tsv()` and it will look like the following when imported:\n\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        read_tsv(\"file.tsv\", show_col_types = FALSE)\n        ```\n        :::\n\n\n\n    -   To make `tsv`, run:\n\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        write_file(\"A\\tB\\tC\\n1\\t2\\t3\\n4\\t5\\tNA\\n\", file = \"file.tsv\")\n        ```\n        :::\n\n\n\n### Useful read arguments\n\nSuppose you have the following CSV files that you want to read in, called `file.csv`:\n\n`file.csv`\n\n```         \nA,B,C\n1,2,3\n4,5,NA\n```\n\n`file3.csv`\n\n```         \nA,B,C\n7,8,9\nNA,11,12\n```\n\nTo make these files, run:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_file(\"A,B,C\\n1,2,3\\n4,5,NA\", file = \"file.csv\")\nwrite_file(\"A,B,C\\n7,8,9\\nNA,11,12\", file = \"file3.csv\")\n```\n:::\n\n\n\n-   No header: `col_names = FALSE`\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    read_csv(\"file.csv\", col_names = FALSE)\n    ```\n    :::\n\n\n\n-   Provide header: `col_names = c(\"x\", \"y\", \"z\")`\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    read_csv(\"file.csv\", col_names = c(\"x\", \"y\", \"z\"))\n    ```\n    :::\n\n\n\n-   Skip lines:\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    read_csv(\"file.csv\", skip = 1)\n    ```\n    :::\n\n\n\n-   Read a subset of lines:\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    read_csv(\"file.csv\", n_max = 1)\n    ```\n    :::\n\n\n\n-   Read values as missing:\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    read_csv(\"file.csv\", na = c(\"1\"))\n    ```\n    :::\n\n\n\n-   Specify decimal marks:\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    read_delim(\"file2.csv\", locale = locale(decimal_mark = \",\"))\n    ```\n    :::\n\n\n\n-   Read multiple files into a single table:\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    read_csv(c(\"file.csv\", \"file3.csv\"), id = \"origin_file\")\n    ```\n    :::\n\n\n\n### Save data with readr\n\n``` r\nwrite_*(\n  x, file, \n  na = \"NA\", \n  append, col_names, quote, escape, eol, num_threads, progress\n)\n```\n\n-   Write files with any delimiter: `write_delim(x, file, delim = \" \")`\n-   Write a comma delimited file: `write_csv(x, file)`\n-   Write a semicolon delimited file: `write_csv2(x, file)`\n-   Write a tab delimited file: `write_tsv(x, file)`\n\n### Column specification with readr\n\nColumn specifications define what data type each column of a file will be imported as.\nBy default readr will generate a column spec when a file is read and output a summary.\n\n`spec(df)`: Extract the full column specification for the given imported data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspec(df)\n# cols(\n#   age = col_integer(),   # age is an integer\n#   edu = col_character(), # edu is a character\n#   earn = col_double()    # earn is a double (numeric)\n# )\n```\n:::\n\n\n\n#### Column types\n\nEach column type has a function and corresponding string abbreviation.\n\n-   `col_logical() - \"l\"`\n-   `col_integer() - \"i\"`\n-   `col_double() - \"d\"`\n-   `col_number() - \"n\"`\n-   `col_character() - \"c\"`\n-   `col_factor(levels, ordered = FALSE) - \"f\"`\n-   `col_datetime(format = \"\") - \"T\"`\n-   `col_date(format = \"\") - \"D\"`\n-   `col_time(format = \"\") - \"t\"`\n-   `col_skip() - \"-\", \"_\"`\n-   `col_guess() - \"?\"`\n\n#### Useful column arguments\n\n-   Hide col spec message:\n\n    ``` r\n    read_*(file, show_col_types = FALSE)\n    ```\n\n-   Select columns to import: Use names, position, or selection helpers.\n\n    ``` r\n    read_*(file, col_select = c(age, earn))\n    ```\n\n-   Guess column types: To guess a column type, `read_ *()` looks at the first 1000 rows of data.\n    Increase with `guess_max`.\n\n    ``` r\n    read_*(file, guess_max = Inf)\n    ```\n\n#### Define column specification\n\n-   Set a default type:\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    read_csv(\n      file, \n      col_type = list(.default = col_double())\n    )\n    ```\n    :::\n\n\n\n-   Use column type or string abbreviation:\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    read_csv(\n      file, \n      col_type = list(x = col_double(), y = \"l\", z = \"_\")\n    )\n    ```\n    :::\n\n\n\n-   Use a single string of abbreviations:\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # col types: skip, guess, integer, logical, character\n    read_csv(\n      file, \n      col_type = \"_?ilc\"\n    )\n    ```\n    :::\n\n\n\n## Import spreadsheets with readxl\n\n### Read Excel files\n\nRead a .xls or .xlsx file based on the file extension, e.g. `read_excel(\"excel_file.xlsx\")`.\nSee [Useful read arguments] for more read arguments.\nAlso `read_xls()` and `read_xlsx()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_excel(path, sheet = NULL, range = NULL)\n```\n:::\n\n\n\n-   If the Google sheet you want to import is the following:\n\n    | A   | B   | C   | D   | E   |\n    |-----|-----|-----|-----|-----|\n    | x1  | x2  | x3  | x4  | x5  |\n    | x   |     | z   | 8   |     |\n    | y   | 7   |     | 9   | 10  |\n\n    : Spreadsheet with 5 columns (A through E) and three rows. First row reads x1 through x5. Second and third row have some missing values.\n\n-   It will look like the following when imported:\n\n\n\n    ::: {.cell}\n    \n    :::\n\n\n\n### Read sheets\n\n-   Specify which sheet to read by position or name: `read_excel(path, sheet = NULL)`\n\n    -   `read_excel(path, sheet = 1)`\n    -   `read_excel(path, sheet = \"s1\")`\n\n-   Get a vector of sheet names: `excel_sheets(path)`\n\n    `excel_sheets(\"excel_file.xlsx\")`\n\n-   To read multiple sheets:\n\n    1.  Get a vector of sheet names from the file path.\n\n    2.  Set the vector names to be the sheet names.\n\n    3.  Use `purrr::map()` and `purrr::list_rbind()` to read multiple files into one data frame.\n\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        path <- \"your_file_path.xlsx\"\n        path |> \n          excel_sheets() |>\n          set_names() |>\n          map(read_excel, path = path) |>\n          list_rbind()\n        ```\n        :::\n\n\n\n### readxl column specification\n\n-   Column specifications define what data type each column of a file will be imported as.\n\n-   Use the `col_types` argument of `read_excel()` to set the column specification.\n\n-   Guess column types: To guess a column type, `read_excel()` looks at the first 1000 rows of data.\n    Increase with the `guess_max` argument.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    read_excel(path, guess_max = Inf)\n    ```\n    :::\n\n\n\n-   Set all columns to same type, e.g. character:\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    read_excel(path, col_types = \"text\")\n    ```\n    :::\n\n\n\n-   Set each column individually:\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    read_excel(\n      path,\n      col_types = c(\"text\", \"guess\", \"guess\",\"numeric\")\n    )\n    ```\n    :::\n\n\n\n-   **Column types:**\n\n    | logical | numeric | text  | date       | list  |\n    |---------|---------|-------|------------|-------|\n    | TRUE    | 2       | hello | 1947-01-08 | hello |\n    | FALSE   | 3.45    | world | 1956-10-21 | 1     |\n\n    : Table with 5 columns. Column headers are various data types (logical, numeric, text, date, and list). The data in two rows show examples of data for the given column type.\n\n    -   `skip`\n\n    -   `guess`\n\n    -   `logical`\n\n    -   `date`\n\n    -   `numeric`\n\n    -   `text`\n\n    -   Use `list`for columns that include multiple data types.\n        See **tidyr** and **purrr** for list-column data.\n\n### Other useful Excel packages\n\n-   For functions to write data to Excel files: **openxlsx** and **writexl**\n-   For working with non-tabular Excel data: **tidyxl**\n\n## Import spreadsheets with googlesheets4\n\n### Read sheets\n\nRead a sheet from a URL, a Sheet ID, or a dribble samefrom the googledrive package.\nSee [Useful read arguments] for more read arguments.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_sheet(ss, sheet = NULL, range = NULL)\n```\n:::\n\n\n\nSame as `range_read()`.\n\n-   If the Google sheet you want to import is the following:\n\n    | A   | B   | C   | D   | E   |\n    |-----|-----|-----|-----|-----|\n    | x1  | x2  | x3  | x4  | x5  |\n    | x   |     | z   | 8   |     |\n    | y   | 7   |     | 9   | 10  |\n\n    : Spreadsheet with 5 columns (A through E) and three rows. First row reads x1 through x5. Second and third row have some missing values.\n\n-   It will look like the following when imported:\n\n\n\n    ::: {.cell}\n    \n    :::\n\n\n\n### Sheet metadata\n\n-   **URLs** are in the form:\n\n    ```         \n    https://docs.google.com/spreadsheets/d/\n                SPREADSHEET_ID/edit#gid=SHEET_ID\n    ```\n\n-   Get spreadsheet meta data: `gs4_get(ss)`\n\n-   Get data on all spreadsheet files: `gs4_find(...)`\n\n-   Get a tibble of properties for each worksheet: `sheet_properties(ss)`.\n    Also `sheet_names()`.\n\n### Write sheets\n\n-   `write_sheet(data, ss = NULL, sheet = NULL)`**:** Write a data frame into a new or existing Sheet. \n-   `gs4_create(name, ..., sheets = NULL)`: Create a new Sheet with a vector of names, a data frame, or a (named) list of data frames.\n-   `sheet_append(ss, data, sheet = 1)`: Add rows to the end of a worksheet.\n\n### googlesheets4 column specification\n\nColumn specifications define what data type each column of a file will be imported as.\n\nUse the `col_types` argument of `read_sheet()`**/**`range_read()` to set the column specification.\n\n-   Guess column types: To guess a column type `read_sheet()`/`range_read()` looks at the first 1000 rows of data.\n    Increase with `guess_max`.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    read_sheet(path, guess_max = Inf)\n    ```\n    :::\n\n\n\n-   Set all columns to same type, e.g. character:\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    read_sheet(path, col_types = \"c\")\n    ```\n    :::\n\n\n\n-   Set each column individually:\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # col types: skip, guess, integer, logical, character\n    read_sheets(ss, col_types = \"_?ilc\")\n    ```\n    :::\n\n\n\n-   Column types:\n\n    -   skipped my lunch 🥙 🍱 and: \"\\_\" or \"-\"\n\n    -   guess: \"?\"\n\n    -   logical: \"l\"\n\n    -   integer: \"i\"\n\n    -   double: \"d\"\n\n    -   numeric: \"n\"\n\n    -   date: \"D\"\n\n    -   datetime: \"T\"\n\n    -   character: \"c\"\n\n    -   list-column: \"L\"\n\n    -   cell: \"C\" (returns list of raw cell data)\n\n    -   Use list for columns that include multiple data types.\n        See **tidyr** and **purrr** for list-column data.\n\n### File level operations\n\n-   **googlesheets4** also offers ways to modify other aspects of Sheets (e.g. freeze rows, set column width, manage (work)sheets). Go to [googlesheets4.tidyverse.org](https://googlesheets4.tidyverse.org/) to read more.\n-   For whole-file operations (e.g. renaming, sharing, placing within a folder), see the tidyverse package **googledrive** at [googledrive.tidyverse.org](https://googledrive.tidyverse.org).\n\n## Cell specification for readxl and googlesheets4\n\nUse the **range** argument of **readxl::read_excel()** or **googlesheets4::read_sheet()** to read a subset of cells from a sheet.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_excel(path, range = \"Sheet1!B1:D2\")\nread_sheet(ss, range = \"B1:D2\")\n```\n:::\n\n\n\nAlso use the range argument with cell specification functions `cell_limits()`, `cell_rows()`, `cell_cols()`, and `anchored()`**.**\n\n------------------------------------------------------------------------\n\nCC BY SA Posit Software, PBC • [info\\@posit.co](mailto:info@posit.co) • [posit.co](https://posit.co)\n\nLearn more at\n\n-   readr: [readr.tidyverse.org](https://readr.tidyverse.org)\n-   readxl: [readxl.tidyverse.org](https://readxl.tidyverse.org/)\n-   googlesheets4: [googlesheets4.tidyverse.org](https://googlesheets4.tidyverse.org/)\n\nUpdated: 2024-05.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npackageVersion(\"readr\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] '2.1.5'\n```\n\n\n:::\n\n```{.r .cell-code}\npackageVersion(\"readxl\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] '1.4.3'\n```\n\n\n:::\n\n```{.r .cell-code}\npackageVersion(\"googlesheets4\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] '1.1.1'\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}