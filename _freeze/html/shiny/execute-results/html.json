{
  "hash": "c269183b66262fd2f6ac1b8c55a99660",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Shiny for R :: Cheatsheet\"\ndescription: \" \"\nimage-alt: \"\"\nexecute:\n  eval: false\n  output: false\n  warning: true\n---\n\n::: {.cell .column-margin}\n<img src=\"images/logo-shiny.png\" height=\"138\" alt=\"Hex logo for Shiny - A blue hexagon with the word 'Shiny' written in white in a flowing cursive font. The tail of the 'y' flows back to the left to underline the word.\" />\n<br><br><a href=\"../shiny.pdf\">\n<p><i class=\"bi bi-file-pdf\"></i> Download PDF</p>\n<img src=\"../pngs/shiny.png\" width=\"200\" alt=\"\"/>\n</a>\n<br><br><p>Translations (PDF)</p>\n* <a href=\"../translations/french/shiny_fr.pdf\"><i class=\"bi bi-file-pdf\"></i>French</a>\n* <a href=\"../translations/german/shiny_de.pdf\"><i class=\"bi bi-file-pdf\"></i>German</a>\n* <a href=\"../translations/spanish/shiny_es.pdf\"><i class=\"bi bi-file-pdf\"></i>Spanish</a>\n* <a href=\"../translations/turkish/shiny_tr.pdf\"><i class=\"bi bi-file-pdf\"></i>Turkish</a>\n* <a href=\"../translations/vietnamese/shiny_vi.pdf\"><i class=\"bi bi-file-pdf\"></i>Vietnamese</a>\n:::\n\n\n\n\n## Building an App\n\nA **Shiny** app is a web page (`ui`) connected to a computer running a live R session (`server`).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\n```\n:::\n\n\n\n\nUsers can manipulate the UI, which will cause the server to update the UI's display (by running R code).\n\nSave your template as `app.R`.\nKeep your app in a directory along with optional extra files.\n\n-   **app-name:** The directory name is the app name\n-   **app.R**\n-   DESCRIPTION and README: (optional) used in showcase mode\n-   R/: (optional) directory of supplemental .R files that are sourced automatically, must be named `R`\n-   www/: (optional) directory of files to share with web browsers (images, CSS, .js, etc.), must be named `www`\n\nLaunch apps stored in a directory with `runApp(<path to directory>)`.\n\nTo generate the template, type `shinyApp` and press `Tab` in the RStudio IDE or go to **File \\> New Project \\> New Directory \\> Shiny Application**.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# app.R \nlibrary(shiny)\n\n#In ui nest R functions to build an HTML interface\nui <- fluidPage(\n  numericInput(inputId = \"n\", \"Sample size\", value = 25),\n  plotOutput(outputId = \"hist\")\n)\n# Customize the UI with Layout Functions\n# Add Inputs with *Input() functions\n# Add Outputs with *Output() functions\n\n\n# Tell the server how to render outputs and respond to inputs with R\nserver <- function(input, output, session) {\n  output$hist <- renderPlot({\n    hist(rnorm(input$n))\n  })\n}\n# Wrap code in render*() functions before saving to output\n# Refer to UI inputs with input$<id> and outputs with output$<id>\n  \n# Call shinyApp() to combine ui and server into an interactive app!\nshinyApp(ui = ui, server = server)\n```\n:::\n\n\n\n\nSee annotated examples of Shiny apps by running `runExample(<example name>)`.\nRun `runExample()` with no arguments for a list of example names.\n\n## Share\n\nShare your app in three ways:\n\n1.  Host it on [shinyapps.io](shinyapps.io), a cloud based service from Posit. To deploy Shiny apps:\n    -   Create a free or professional account at [shinyapps.io](shinyapps.io)\n\n    -   Click the Publish icon in RStudio IDE, or run: `rsconnect::deployApp(\"<path to directory>\")`\n2.  Purchase Posit Connect, a publishing platform for R and Python. [posit.co/products/enterprise/connect/](posit.co/products/enterprise/connect/)\n3.  Build your own Shiny Server. [posit.co/products/open-source/shinyserver/](posit.co/products/open-source/shinyserver/)\n\n## Outputs\n\n`render*()` and `*Output()` functions work together to add R output to the UI.\n\n+----------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+\n| `render*()` Functions                                                                                                            | `*Output()` Functions                                                         |\n+==================================================================================================================================+===============================================================================+\n| `DT::renderDataTable(expr, options, searchDelay, callback, escape, env, quoted, outputArgs)`                                     | `dataTableOutput(outputId)`                                                   |\n+----------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+\n| `renderImage(expr, env, quoted, deleteFile, outputArgs)`                                                                         | `imageOutput(outputId, width, height, click, dblclick, hover, brush, inline)` |\n+----------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+\n| `renderPlot(expr, width, height, res, …, alt, env, quoted, execOnResixe, outputArgs`                                             | `plotOutput(outputId, width, height, click, dblclick, hover, brush, inline)`  |\n+----------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+\n| `renderPrint(expr, env, quoted, width, outputArgs)`                                                                              | `verbatimTextOutput(outputId, placeholder)`                                   |\n+----------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+\n| `renderTable(expr, striped, hover, bordered, spacing, width, align, rownames, colnames, digits, na, …, env, quoted, outputArgs)` | `tableOutput(outputId)`                                                       |\n+----------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+\n| `renderText(expr, env, quoted, outputArgs, sep)`                                                                                 | `textOutput(outputId, container, inline)`                                     |\n+----------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+\n| `renderUI(expr, env, quoted, outputArgs)`                                                                                        | `uiOutput(outputId, inline, container, …)`\\                                   |\n|                                                                                                                                  | `htmlOutput(outputId, inline, container, …)`                                  |\n+----------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------+\n\n: Table of render\\*() functions and their associated \\*Output() functions.\n\nThese are the core output types.\nSee [htmlwidgets.org](https://www.htmlwidgets.org/) for many more options.\n\n## Inputs\n\nCollect values from the user.\n\nAccess the current value of an input object with `input$<inputId>`.\nInput values are **reactive**.\n\n-   `actionButton(inputId, label, icon, width, ...)`\n\n-   `actionLink(inputId, label, icon, ...)`\n\n-   `checkboxGroupInput(inputId, label, choices, selected, inline, width, choiceNames, choiceValues)`\n\n-   `checkboxInput(inputId, label, value, width)`\n\n-   `dateInput(inputId, label, value, min, max, format, startview, weekstart, language, width, autoclose, datesdisabled, daysofweekdisabled)`\n\n-   `dateRangeInput(inputId, label, start, end, min, max, format, startview, weekstart, language, separator, width, autoclose)`\n\n-   `fileInput(inputId, label, multiple, accept, width, buttonLabel, placeholder)`\n\n-   `numericInput(inputId, label, value, min, max, step, width)`\n\n-   `passwordInput(inputId, label, value, width, placeholder)`\n\n-   `radioButtons(inputId, label, choices, selected, inline, width, choiceNames, choiceValues)`\n\n-   `selectInput(inputId, label, choices, selected, multiple, selectize, width, size)`: Also `selectizeInput()`\n\n-   `sliderInput(inputId, label, min, max, value, step, round, format, locale, ticks, animate, width, sep, pre, post, timeFormat, timezone, dragRange)`\n\n-   `textInput(inputId, label, value, width, placeholder)`: Also `textAreaInput()`\n\n<!-- page 2 -->\n\n## Reactivity\n\nReactive values work together with reactive functions.\nCall a reactive value from within the arguments of one of these functions to avoid the error `Operation not allowed without an active reactive context`**.**\n\n![](images/reactivity-diagram.png){fig-align=\"center\"}\n\n::: {.callout-note appearance=\"minimal\" icon=\"false\" collapse=\"true\"}\n## Expand to read about the reactivity diagram {aria-hidden=\"true\"}\n\n### Phases in the reactivity diagram\n\n-   Create your own reactive values\n    -   `reactiveValues()`\n    -   `reactiveFileReader()`\n    -   `reactivePoll()`\n    -   `*Input()`\n-   Perform side effects\n    -   `observeEvent()`\n    -   `observe()`\n-   Schedule updates\n    -   `invalidateLater()`\n-   Create reactive expressions\n    -   `reactive()`\n-   Remove reactivity\n    -   `isolate()`\n-   React based on event\n    -   `eventReactive()`\n-   Render reactive output\n    -   `render*()`\n:::\n\n### Create Your own Reactive Values\n\n-   `*Input()` functions: Each input function creates a reactive value stored as `input$<inputId>`.\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # *Input() example\n    ui <- fluidPage(\n      textInput(\"a\",\"\",\"A\")\n    )\n    ```\n    :::\n\n\n\n\n-   `reactiveVal():` Creates a single reactive values object.\n\n    `reactiveValues(...)`: Creates a list of reactive values whose values you can set.\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # reactiveVal example\n    server <- function(input,output){\n      rv <- reactiveValues() \n      rv$number <- 5\n    }\n    ```\n    :::\n\n\n\n\n### Create Reactive Expressions\n\n-   `reactive(x, env, quoted, label, domain)`:\n\n    -   Reactive expressions:\n\n        -   cache their value to reduce computation\n\n        -   can be called elsewhere\n\n        -   notify dependencies when invalidated\n\n    Call the expression with function syntax, e.g. `re()`.\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(shiny)\n    \n    ui <- fluidPage(\n      textInput(\"a\",\"\",\"A\"), \n      textInput(\"z\",\"\",\"Z\"), \n      textOutput(\"b\")\n      )\n    \n    server <- function(input,output){\n      re <- reactive({ \n        paste(input$a,input$z)\n      })\n      output$b <- renderText({\n        re()\n      }) \n    }\n    \n    shinyApp(ui, server)\n    ```\n    :::\n\n\n\n\n### React Based on Event\n\n-   `eventReactive(eventExpr, valueExpr, event.env, event.quoted, value.env, value.quoted, ..., label, domain, ignoreNULL, ignoreInit)`: Creates reactive expression with code in 2nd argument that only invalidates when reactive values in 1st argument change.\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(shiny)\n    \n    ui <- fluidPage(\n      textInput(\"a\",\"\",\"A\"), \n      actionButton(\"go\",\"Go\"), \n      textOutput(\"b\")\n    )\n    \n    server <- function(input,output){\n      re <- eventReactive(\n        input$go,{input$a}\n      )\n      output$b <- renderText({\n        re()\n      }) \n    }\n    ```\n    :::\n\n\n\n\n### Render Reactive Output\n\n-   `render*()` functions: (see front page) Builds an object to display.\n    Will rerun code in body to rebuild the object whenever a reactive value in the code changes.\n    Save the results to `output$<outputId>`.\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(shiny)\n    \n    ui <- fluidPage(\n      textInput(\"a\",\"\",\"A\"), \n      textOutput(\"b\")\n    )\n    \n    server <- function(input,output){\n      output$b <-\n        renderText({\n          input$a\n      })\n    }\n    \n    shinyApp(ui, server)\n    ```\n    :::\n\n\n\n\n### Perform Side Effects\n\n-   `observe(x, env)`: Creates an observer from the given expression.\n\n-   `observeEvent(eventExpr, handlerExpr, event.env, event.quoted, handler.env, handler.quoted, ..., label, suspended, priority, domain, autoDestroy, ignoreNULL, ignoreInit, once)`: Runs code in 2nd argument when reactive values in 1st argument change.\n    Alternative to ``` observe``() ```.\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(shiny)\n    \n    ui <- fluidPage(textInput(\"a\",\"\",\"A\"), actionButton(\"go\",\"Go\"))\n    \n    server <- function(input,output){\n      observeEvent(input$go, {\n        print(input$a)\n      })\n    }\n    \n    shinyApp(ui, server)\n    ```\n    :::\n\n\n\n\n### Remove Reactivity\n\n-   `isolate(expr)`: Runs a code block.\n    Returns a **non-reactive** copy of the results.\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(shiny)\n    \n    ui <- fluidPage(\n      textInput(\"a\",\"\",\"A\"), \n      textOutput(\"b\")\n    )\n    \n    server <- function(input,output){ \n      output$b <- \n        renderText({\n          isolate({input$a})\n        })\n    }\n    \n    shinyApp(ui, server)\n    ```\n    :::\n\n\n\n\n## UI\n\nAn app's UI is an HTML document.\n\nUse Shiny's functions to assemble this HTML with R.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfluidPage(\n  textInput(\"a\",\"\")\n)\n```\n:::\n\n\n\n\nReturns HTML:\n\n``` html\n<div class=\"container-fluid\">\n  <div class=\"form-group shiny-input-container\">\n    <label for=\"a\"></label>\n    <input id=\"a\" type=\"text\" class=\"form-control\" value=\"\"/>\n  </div>\n</div>\n```\n\nAdd static HTML elements with **tags**, a list of functions that parallel common HTML tags, e.g. `tags$a()`.\nUnnamed arguments will be passed into the tag; named arguments will become tag attributes.\n\nRun `names(tags)` for a complete list.\n`tags$h1(\"Header\")` -\\> `<h1>Header</h1>`\n\nThe most common tags have wrapper functions.\nYou do not need to prefix their names with `tags$`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- fluidPage(\n  h1(\"Header 1\"), # <h1>Header 1</h1>\n  hr(), # <hr>\n  br(), # <br>\n  p(strong(\"bold\")), # <p><strong>bold</strong></p>\n  p(em(\"italic\")), # <p><em>italic</em></p>\n  p(code(\"code\")), # <p><code>code</code></p>\n  a(href=\"\", \"link\"), # <a href=\"\">link</a>\n  HTML(\"<p>Raw html</p>\") # display raw html\n)\n```\n:::\n\n\n\n\nTo include a CSS file, use `includeCSS()`, or\n\n1.  Place the file in the `www` subdirectory\n\n2.  Link to it with:\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    tags$head(\n      tags$link(\n        rel = \"stylesheet\", \n        type = \"text/css\", \n        href = \"<file name>\"\n        )\n      )\n    ```\n    :::\n\n\n\n\nTo include JavaScript, use `includeScript()`, or\n\n1.  Place the file in the `www` subdirectory\n\n2.  Link to it with:\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    tags$head(tags$script(src = \"<file name>\"))\n    ```\n    :::\n\n\n\n\nTo include an image:\n\n1.  Place the file in the `www` subdirectory\n\n2.  Link to it with:\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    img(src = \"<file name>\")\n    ```\n    :::\n\n\n\n\n## Layouts\n\nUse the **bslib** package to lay out the your app and its components.\n\n### Page layouts\n\n#### Dashboard layouts\n\n-   `page_sidebar()` - A sidebar page\n\n-   `page_navbar()` - Multi-page app with a top navigation bar\n\n-   `page_fillable()` - A screen-filling page layout\n\n#### Basic layouts\n\n-   `page()`\n\n-   `page_fluid()`\n\n-   `page_fixed()`\n\n### User interface layouts\n\n#### Multiple columns\n\n-   `layout_columns()` - Organize UI elements into Bootstrap’s 12-column CSS grid\n\n-   `layout_column_wrap()` - Organize elements into a grid of equal-width columns\n\n#### Multiple panels\n\n-   `navset_tab()` - Tabbed navigation container\n\n-   `navset_pill()` - Creates a navigation container that behaves exactly like `navset_tab()`, but the tab toggles are *pills* or button-shaped\n\n-   `navset_underline()` - Creates a navigation container that behaves exactly like `navset_tab()` and `navset_pill()`, but the active/focused navigation links are styled with an underline\n\n-   `nav_panel()` - Content to display when given item is selected\n\n-   `nav_menu()` - Create a menu of nav items\n\n-   `nav_item()` - Place arbitrary content in the nav panel\n\n-   `nav_spacer()` - Add spacing between nav items\n\nAlso dynamically update nav containers with `nav_select()`, `nav_insert()`, `nav_remove()`, `nav_show()`, `nav_hide()`.\n\n#### Sidebar layout\n\n-   `sidebar()`\n\n-   `layout_sidebar()`\n\n-   `toggle_sidebar()`\n\n## Themes\n\nUse the **bslib** package to add existing themes to your Shiny app ui, or make your own.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(bslib)\nui <- fluidPage(\n  theme = bs_theme(\n    boothswatch = \"darkly\",\n    ...\n  )\n)\n```\n:::\n\n\n\n\n-   `bootswatch_themes()`: Get a list of themes.\n\nBuild your own theme by customizing individual arguments.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbs_theme(\n  bg = \"#558AC5\",\n  fg = \"#F9B02D\",\n  ...\n)\n```\n:::\n\n\n\n\n-   `?bs_theme` for a full list of arguments.\n\n-   `bs_themer()`: Place within the server function ot use the interactive theming widget.\n\n------------------------------------------------------------------------\n\nCC BY SA Posit Software, PBC • [info\\@posit.co](mailto:info@posit.co) • [posit.co](https://posit.co)\n\nLearn more at [shiny.rstudio.com](https://shiny.rstudio.com/)\n\nUpdated: 2024-05.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npackageVersion(\"shiny\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] '1.8.1.1'\n```\n\n\n:::\n:::\n\n\n\n\n------------------------------------------------------------------------\n",
    "supporting": [
      "shiny_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}