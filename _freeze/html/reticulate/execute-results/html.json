{
  "hash": "0a00029422773ac483de38e25cba2945",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Use Python with R with reticulate :: Cheatsheet\"\ndescription: \" \"\nimage-alt: \"\"\nexecute:\n  eval: false\n  output: false\n  warning: false\n---\n\n::: {.cell .column-margin}\n<img src=\"images/logo-reticulate.png\" height=\"138\" alt=\"Hex logo for reticulate - a navy blue background with a light-blue and yellow snake semi-coiled across the foreground. 'reticulate' is written across the bottom in white.\" />\n<br><br><a href=\"../reticulate.pdf\">\n<p><i class=\"bi bi-file-pdf\"></i> Download PDF</p>\n<img src=\"../pngs/reticulate.png\" width=\"200\" alt=\"\"/>\n</a>\n<br><br><p>Translations (PDF)</p>\n* <a href=\"../translations/spanish/reticulate_es.pdf\"><i class=\"bi bi-file-pdf\"></i>Spanish</a>\n:::\n\n\nThe **reticulate** package lets you use Python and R together seamlessly in R code, in R Markdown documents, and in the RStudio IDE.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\n```\n:::\n\n\n## Python in R Markdown\n\n(Optional) Build Python env to use.\n\nknitr versions >= 1.18 will automatically use the reticulate engine for Python chunks. See `?reticulate::eng_python` for a listing of supported knitr chunk options.\n\n\n```{{{r}}}\n#| label: setup\n#| include: false\n\nlibrary(reticulate) \nvirtualenv_create(\"fmri-proj\") \npy_install(\"seaborn\", envname = \"fmri-proj\") \nuse_virtualenv(\"fmri-proj\")`\n```\n\nBegin Python chunks with ```` ```{python} ````.\nChunk options like `echo`, `include`, etc. all work as expected.\n\n```{{{python}}} \n#| echo: false\n\nimport seaborn as sns \nfmri = sns.load_dataset(\"fmri\")`\n```\n\nUse the `py` object the access objects created in Python chunks from R chunks.\n\n````         \n``` {{r}}\nf1 <- subset(py$fmri, region = \"parietal\")\n```\n````\n\nPython chunks all execute within a **single** Python session so you have access to all objects created in previous chunks.\n\nUse the `r` object to access objects created in R chunks from Python chunks.\n\n````         \n``` {{python}}\nimport matplotlib as mpl\nsns.lmplot(\"timepoint\", \"signal\", data=r.f1)\nmpl.pyplot.show()\n```\n````\n\n## Python in R\n\n`python.r` Example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\npy_install(\"seaborn\")\nuse_virtualenv(\"r-reticulate\")\n\nsns <- import(\"seaborn\")\n\nfmri <- sns$load_dataset(\"fmri\")\ndim(fmri)\n\n# creates tips\nsource_python(\"python.py\")\ndim(tips)\n\n# creates tips in main\npy_run_file(\"python.py\")\ndim(py$tips)\n\npy_run_string(\"print(tips.shape)\")\n```\n:::\n\n\n`python.py` Example:\n\n``` python\nimport seaborn as sns\ntips = sns.load_dataset(\"tips\")\n```\n\nCall Python from R code in three ways:\n\n### Import Python Modules\n\nUse `import()` to import any Python module.\nAccess the attributes of a module with `$`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\npy_install(\"seaborn\")\nuse_virtualenv(\"r-reticulate\")\n\nsns <- import(\"seaborn\")\n\ntips <- sns$load_dataset(\"tips\")\ndim(tips)\n```\n:::\n\n\n-   `import(module, as = NULL, convert = TRUE, delay_load = FALSE)`: Import a Python module.\n    If `convert = TRUE`, Python objects are converted to their equivalent R types.\n    Also `import_from_path()`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    import(\"pandas\")\n    ```\n    :::\n\n\n-   `import_main(convert = TRUE)`: Import the main module, where Python executes code by default.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    import_main()\n    ```\n    :::\n\n\n-   `import_builtings(convert = TRUE)`: Import Python's built-in functions.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    import_builtins()\n    ```\n    :::\n\n\n### Source Python Files\n\nUse `source_python()` to source a Python script and make the Python functions and objects it creates available in the calling R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource_python(\"python.py\")\ndim(py$tips)\n```\n:::\n\n\n-   `source_python(file, envir = parent.frame(), convert = TRUE)`: Run a Python script, assigning objects to a specified R environment.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    source_python(\"python.py\")\n    ```\n    :::\n\n\n### Run Python Code\n\nExecute Python code into the `main` Python modules with `py_run_file()` or `py_run_string()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npy_run_file(\"python.py\")\ndim(py$tips)\n\npy_run_string(\"print(tips.shape)\")\n```\n:::\n\n\n-   `py_run_string(code, local = FALSE, convert = TRUE)`: Run Python code (passed as a string) in the main module.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    py_run_string(\"x = 10\")\n    py$x\n    ```\n    :::\n\n\n-   `py_run_file(file, local = FALSE, convert = TRUE)`: Run Python file in the main module.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    py_run_file(\"python.py\")\n    ```\n    :::\n\n\n-   `py_eval(code, convert = TRUE)`: Run a Python expression, return the result.\n    Also `py_call()`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    py_eval(\"1 + 1\")\n    ```\n    :::\n\n\nAccess the results, and anything else in Python's `main` module, with `py`.\n\n-   `py`: An R object that contains the Python main module and the results stored there.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    py$x\n    ```\n    :::\n\n\n## Object Conversion\n\n**Tip: To index Python objects begin at 0, use integers, e.g. `OL`**\n\nReticulate provides **automatic** built-in conversion between Python and R for many Python types.\n\n| R                      | Python            |\n|------------------------|-------------------|\n| Single-element vector  | Scalar            |\n| Multi-element vector   | List              |\n| List of multiple types | Tuple             |\n| Named List             | Dict              |\n| Matrix/Array           | NumPy ndarray     |\n| Data Frame             | Pandas DataFrame  |\n| Function               | Python function   |\n| NULL, TRUE, FALSE      | None, True, False |\n\n: Table of data types in R and their Python equivalents.\n\nOr, if you like, you can convert manually with\n\n-   `py_to_r(x)`: Convert a Python object to an R object.\n    Also `r_to_py()`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    py_to_r(py)\n    ```\n    :::\n\n\n-   `tuple(..., convert = FALSE)`: Create a Python tuple.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    tuple(\"a\", \"b\", \"c\")\n    ```\n    :::\n\n\n-   `dict(..., convert = FALSE)`: Create a Python dictionary object.\n    Also `py_dict()` to make a dictionary that uses Python objects as keys.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    dict(foo = \"bar\", index = 42L)\n    ```\n    :::\n\n\n-   `np_array(data, dtype = NULL, order = \"C\")`: Create NumPy arrays.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    np_array(c(1:8), dtype = \"float16\")\n    ```\n    :::\n\n\n-   `array_reshape(x, dim, order = c(\"C\", \"F\"))`: Reshape a Python array.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    x <- 1:4\n    array_reshape(x, c(2,2))\n    ```\n    :::\n\n\n-   `py_func(f)`: Wrap an R function in a Python function with the same signature.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    py_func(xor)\n    ```\n    :::\n\n\n-   `py_main_thread_func(f)`: Create a function that will always be called on the main thread.\n\n-   `iterate(it, f = base::identity, simplify = TRUE)`: Apply an R function to each value of a Python iterator or return the values as an R vector, draining the iterator as you go.\n    Also `iter_next()` and `as_iterator()`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    iterate(iter, print)\n    ```\n    :::\n\n\n-   `py_interator(fn, completed = NULL)`: Create a Python iterator from an R function.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    seq_gen <- function(x) {\n      n <- x;\n      function() {\n        n <<- n + 1;\n        n\n      }\n    }\n    py_iterator(seq_gen(9))\n    ```\n    :::\n\n\n## Helpers\n\n-   `py_capture_output(expr, type = c(\"stdout\", \"stderr\"))`: Capture and return Python output.\n    Also `py_supress_warnings()`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    py_capture_output(\"x\")\n    ```\n    :::\n\n\n-   `py_get_attr(x, name, silent = FALSE)`: Get an attribute of a Python object.\n    Also `py_set_attr()`, `py_has_attr()`, and `py_list_attributes()`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    py_get_attr(x)\n    ```\n    :::\n\n\n<!-- TO DO: Needs name argument. -->\n\n-   `py_help(object)`: Open the documentation page for a Python object.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    py_help(sns)\n    ```\n    :::\n\n\n-   `py_last_error()`: Get the last Python error encountered.\n    Also `py_clear_last_error()` to clear the last error.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    py_last_error()\n    ```\n    :::\n\n\n-   `py_save_object(object, filename, pickle = \"pickle\", ...)`: Save and load Python objects with pickle.\n    Also `py_load_object()`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    py_save_objects(x, \"x.pickle\")\n    ```\n    :::\n\n\n-   `with(data, expr, as = NULL, ...)`: Evaluate an expression within a Python context manager.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    py <- import_builtins()\n    with(py$open(\"output.txt\", \"w\") %as% file,\n         {file$write(\"Hello, there!\")})\n    ```\n    :::\n\n\n<!-- Page 2 -->\n\n## Python in the IDE\n\nRequires reticulate plus RStudio v1.2+.\nSome features require v1.4+.\n\n![](images/reticulate-ide.png)\n\n::: {.callout-note appearance=\"minimal\" icon=\"false\" collapse=\"true\"}\n## Expand to read about reticulate features in the RStudio IDE {aria-hidden=\"true\"}\n\n### reticulate features in the RStudio IDE\n\n-   Syntax highlighting for Python scripts and chunks.\n-   Tab completion for Python functions and objects (and Python modules imported in R scripts).\n-   Source Python scripts.\n-   Execute Python code line by line with `Cmd + Enter` (`Ctrl + Enter`).\n-   View Python objects in the Environment Pane.\n-   View Python objects in the Data Viewer.\n-   A Python REPL opens in the console when you run Python code with a keyboard shortcut. Type `exit` to close.\n-   `matplotlib` plots display in plots pane.\n-   Press `F1` over a Python symbol to display the help topic for that symbol.\n:::\n\n## Python REPL\n\nRStudio IDE Window:\n\nA REPL (Read, Eval, Print Loop) is a command line where you can run Python code and view the results.\n\n1.  Open in the console with `repl_python()`, or by running code in a Python script with `Cmd + Enter` (`Ctrl + Enter`).\n\n    -   `repl_python(module = NULL, quiet = getOption(\"reticulate.repl.quiet\", default = FALSE), input = NULL)`: Launch a Python REPL. Run `exit` to close.\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        repl_python()\n        ```\n        :::\n\n\n2.  Type commands at `>>>` prompt.\n\n3.  Press `Enter` to run code.\n\n4.  Type `exit` to close and return to R console.\n\n    ```         \n    > reticulate::repl_python()\n    Python 3.9.16 (/Users/mine/.virtualenvs/r-reticulate/bin/python)\n    Reticulate 1.28 REPL -- A Python interpreter in R.\n    Enter 'exit' or 'quit' to exit the REPL and return to R.\n    >>> import seaborn as sns\n    >>> tips = sns.load_dataset(\"tips\")\n    >>> tips.shape\n    (244, 7)\n    >>> exit\n    >\n    ```\n\n## Configure Python\n\nReticulate binds to a local instance of Python when you first call `import()` directly or implicitly from an R session.\nTo control the process, find or build your desired Python instance.\nThen suggest your instance to reticulate.\n**Restart R to unbind.**\n\n### Find Python\n\n-   `install_python(version, list = FALSE, force = FALSE)`: Download and install Python.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    install_python(\"3.9.16\")\n    ```\n    :::\n\n\n-   `py_available(initialize = FALSE)`: Check if Python is available on your system.\n    Also `py_module_available()` and `py_numpy_module()`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    py_available()\n    ```\n    :::\n\n\n-   `py_discover_config()`: Return the detected installation of Python.\n    Use `py_config()` to check which version has been loaded.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    py_config()\n    ```\n    :::\n\n\n-   `virtualenv_list()`: List all available virtual environments.\n    Also `virtualenv_root()`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    virtualenv_list()\n    ```\n    :::\n\n\n-   `conda_list(conda = \"auto\")`: List all available conda envs.\n    Also `conda_binary()` and `conda_version()`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    conda_list()\n    ```\n    :::\n\n\n### Create a Python env\n\n-   `virtualenv_create(envname = NULL, ...)`: Create a new virtual environment.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    virtualenv_create(\"r-pandas\")\n    ```\n    :::\n\n\n-   `conda_create(envname = NULL, ...)`: Create a new conda environment.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    conda_create(\"r-pandas\", packages = \"pandas\")\n    ```\n    :::\n\n\n### Install Packages\n\nInstall Python packages with R (below) or the shell:\n\n`pip install SciPy`\n\n`conda install SciPy`\n\n-   `py_install(packages, envname, ...)`: Install Python packages into a Python env.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    py_install(\"pandas\")\n    ```\n    :::\n\n\n-   `virtualenv_install(envname, packages, ...)`: Install a package within a virtual environment.\n    Also `virtualenv_remove()`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    virtualenv_install(\"r-pandas\", packages = \"pandas\")\n    ```\n    :::\n\n\n-   `conda_installs(envname, packages, ...)`: Install a package within a conda environment.\n    Also `conda_remove()`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    conda_install(\"r-pandas\", packages = \"plotly\")\n    ```\n    :::\n\n\n### Suggest an env to use\n\nSet a default Python interpreter in the RStudio IDE Global or Project Options.\nGo to **Tools \\> Global Options ... \\> Python** for Global Options.\nWithin a project, go to **Tools \\> Project Options... \\> Python**.\n\nOtherwise, to choose an instance of Python to bind to, reticulate scans the instances on your computer in the following order, **stopping at the first instance that contains the module called by `import()`**.\n\n1.  The instance referenced by the environment variable `RETICULATE_PYTHON` (if specified).\n    **Tip: set in .Renviron file.**\n\n    -   `Sys.setenv(RETICULATE_PYTHON = PATH)`: Set default Python binary.\n        Persists across sessions!\n        Undo with `Sys.unsetenv()`.\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        Sys.setenv(RETICULATE_PYTHON = \"/usr/local/bin/python\")\n        ```\n        :::\n\n\n2.  The instances referenced by `use_` functions if called before `import()`.\n\n    -   `use_python(python)`: Path to a Python binary.\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        use_python(\"usr/local/bin/python\")\n        ```\n        :::\n\n\n    -   `use_virtualenv(virtualenv)`: Path to _or_ name of a Python virtualenv.\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        use_virtualenv(\"~/myenv\")\n        #| eval: false\n        use_virtualenv(\"~/myenv\") # path to venv\n        use_virtualenv(\"r-keras\") # name of venv\n        ```\n        :::\n\n\n3.  A virtual env found in the current working directory: \"./.venv\" \n\n4. Environments that are named after the imported module. e.g. \"~/.virtualenvs/r-scipy/\" for `import(\"scipy\")`\n\n5. The package default virtualenv, \"r-reticulate\".\n\n6.  At the location of the Python binary discovered on the system `PATH` (i.e. `Sys.which(\"python\")`)\n\n\n------------------------------------------------------------------------\n\nCC BY SA Posit Software, PBC • [info\\@posit.co](mailto:info@posit.co) • [posit.co](https://posit.co)\n\nLearn more at [rstudio.github.io/reticulate](https://rstudio.github.io/reticulate/).\n\nUpdated: 2024-06.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npackageVersion(\"reticulate\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] '1.37.0'\n```\n\n\n:::\n:::\n\n\n------------------------------------------------------------------------\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}